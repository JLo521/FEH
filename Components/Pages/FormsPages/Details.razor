@page "/forms/details"
@using Microsoft.EntityFrameworkCore
@using FEH.Components
@inject IDbContextFactory<FEH.Data.FEHContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Forms</h2>
    <hr />
    @if (forms is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@forms.FirstName</dd>
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@forms.LastName</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@forms.Email</dd>
            <dt class="col-sm-2">DogName</dt>
            <dd class="col-sm-10">@forms.DogName</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@forms.Status</dd>
            <dt class="col-sm-2">TimeSubmitted</dt>
            <dd class="col-sm-10">@forms.TimeSubmitted</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@forms.Address</dd>
            <dt class="col-sm-2">DogID</dt>
            <dd class="col-sm-10">@forms.DogID</dd>
        </dl>
        <div>
            <a href="@($"/forms/edit?id={forms.ID}")">Edit</a> |
            <a href="@($"/forms")">Back to List</a>
        </div>
    }
</div>

@code {
    private Forms? forms;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        forms = await context.Forms.FirstOrDefaultAsync(m => m.ID == ID);

        if (forms is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
