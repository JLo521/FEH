@page "/register"
@using Microsoft.EntityFrameworkCore
@using FEH
@inject IDbContextFactory<FEH.Data.FEHContext1> DbFactory
@inject NavigationManager NavigationManager
<PageTitle>Register</PageTitle>
<head>
    <style>
        body{
            background: url("../assets/paper.jpg");
        }
    </style>
</head>
<body>
<h1>Register</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="fname" class="form-label">fname:</label> 
                <InputText id="fname" @bind-Value="User.fname" class="form-control" /> 
                <ValidationMessage For="() => User.fname" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="lname" class="form-label">lname:</label> 
                <InputText id="lname" @bind-Value="User.lname" class="form-control" /> 
                <ValidationMessage For="() => User.lname" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="address" class="form-label">address:</label> 
                <InputText id="address" @bind-Value="User.address" class="form-control" /> 
                <ValidationMessage For="() => User.address" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="username" class="form-label">username:</label> 
                <InputText id="username" @bind-Value="User.username" class="form-control" /> 
                <ValidationMessage For="() => User.username" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="password" class="form-label">password:</label> 
                <InputText id="password" @bind-Value="User.password" class="form-control" /> 
                <ValidationMessage For="() => User.password" class="text-danger" /> 
            </div>   
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
        <Popup @ref="popupRef" />
    </div>
</div>
</body>
@code {
    private Popup popupRef;
    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    //protected override async Task OnInitializedAsync(){
    //User = new User
    //  {
    //  isAdmin = false,
    //};
    //}
    private async Task AddUser()
    {
        using var context = DbFactory.CreateDbContext();
        bool validated = true;
        var result = (from User in context.User
                      select User);
        foreach(User x in result){
            if(x.username==User.username&&User.fname!=""&&User.lname!=""&&User.address!=""){
                validated = false;
            }
        }
        if (validated) {
            context.User.Add(User);
            await context.SaveChangesAsync();
            popupRef.Show("success");
        }
        //NavigationManager.NavigateTo("/");
        else{
            popupRef.Show("failure, try another username and fill all boxes");
        }
    }
}
